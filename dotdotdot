#!/bin/bash

#
# Configuration Options
#
AUTO_CHMOD=true
DOTLOG="dot.log"
_SCRIPT_DEBUG=false

#
# Dependencies
#

DOTLOG_ENABLED=false
CURR_USER=$(whoami)

# Locking code modified from https://stackoverflow.com/a/1985512
LOCKFD=99
exit_unlock() { flock -u $LOCKFD; exit $1; }
_prepare_locking() { eval "exec $LOCKFD>\"$1\""; trap exit_unlock EXIT; }
# Obtain an exclusive lock immediately or fail:
exlock_now() { _prepare_locking $1; flock -xn $LOCKFD; }

# Color Output
COLOR_INFO="\e[0;94m"
COLOR_WARN="\e[0;93m"
COLOR_ERROR="\e[1;91m"
COLOR_NULL="\e[0m"
_log() {
    if [[ $DOTLOG != "" && $DOTLOG_ENABLED == true ]]; then
        echo -e "$1\t$2" >> $DOTLOG
    fi
}
# _debug()  { if [[ "$_SCRIPT_DEBUG" == true ]] ; then echo "$1"; fi; _log "DEBUG" "$1"; }
_debug()  { _log "DEBUG" "$1"; }
_info()  { echo -e "$COLOR_INFO$1$COLOR_NULL"; _log "INFO" "$1"; }
_warn()  { echo -e "$COLOR_WARN$1$COLOR_NULL"; _log "WARN" "$1"; }
_error() { echo -e "$COLOR_ERROR$1$COLOR_NULL";_log "ERROR" "$1"; }

STATUS_COLOR=("\e[1;91m" "\e[1;93m" "\e[1;92m")
STATUS_TEXT=(" ERROR " "RUNNING" "SUCCESS")
STATUS_ERROR=0
STATUS_WAITING=1
STATUS_SUCCESS=2

SCREEN_WIDTH=$(tput cols)
_print_status_row_overwrite() {
    echo -ne "\r"
}
_print_status_row() {
    cols_rem=$(( $SCREEN_WIDTH - ${#1} - 10 ))
    echo -ne "${STATUS_COLOR[$2]}[${STATUS_TEXT[$2]}]$COLOR_NULL $1"
    head -c $cols_rem < /dev/zero | tr '\0' ' '
}
_print_status_row_next() {
    echo
}

#
# Start of Script
#

# Check if the directory has a .dotdotdot file:
# From https://stackoverflow.com/a/246128
DOTROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/dotfiles"

while getopts ":vd:" optname; do
    case "$optname" in
        "v")
            _SCRIPT_DEBUG=true
            _debug "Verbose mode on."
            ;;
        "d")
            DOTROOT="$OPTARG"
            _debug "DOTROOT set to $DOTROOT."
            ;;
        "?")
            echo "Unknown option $OPTARG. Halting..."
            exit 1
            ;;
        ":") 
            _error "Value expected for option -$OPTARG. Halting..."
            exit 1
            ;;
        *)
            _error "Unknown error while processing options. Halting..."
            exit 1
            ;;
    esac
done

LOCKFILE="$DOTROOT/.dotdotdot"

# Check that the .dotdotdot lockfile exists.
if [[ ! -f $LOCKFILE ]]; then
    _error "Lock file at $LOCKFILE is missing. Halting..."
    exit 1
fi

if ! exlock_now $LOCKFILE ; then
    _error "Could not acquire lock for $LOCKFILE. Is another instance running?"
    _error "Halting..."
    exit_unlock 1
fi

# Enable logging
if [[ $DOTLOG != "" ]]; then
    DOTLOG="$DOTROOT/$DOTLOG"
    truncate --size 0 "$DOTLOG"
    DOTLOG_ENABLED=true
    _debug "Logging for dotdotdot started"
    _debug "    on $(date)"
    _debug "    at $DOTROOT"
fi


# Loop over all .dotsh files
while read -r scname; do
    scname="${scname#./}"
    scpath="$DOTROOT/$scname"
    scdir="$(dirname $scpath)/"
    
    _debug "With $scname"
    _debug "      at $scpath"
    _debug "    from $scdir"

    # Check if we have exec permissions on the file, and chmod
    # if AUTO_CHMOD is set.
    if [[ ! -x "$scpath" ]]; then
        _debug "  script is not executable."
        if [[ "$AUTO_CHMOD" == true ]]; then
            # Make sure you are the file owner:
            scuser="$(stat -c %U $scpath)"
            if [[ "$scuser" == "$CURR_USER" ]]; then
                chmod u+x $scpath
                if [[ 0 -eq $? ]]; then
                    _debug "  changed permissions successfully."
                else
                    _debug "  failed to change permissions."
                    _print_status_row $scname $STATUS_ERROR
                    _print_status_row_next
                    _warn "    Automatic CHMOD of '$scpath' failed."                    
                    continue
                fi
            else
                _print_status_row $scname $STATUS_ERROR
                _print_status_row_next
                _error "Cannot automatically chmod '$scpath' because the file is owned by $scuser; you are $CURR_USER. Halting..."
                exit_unlock 1
            fi
        fi
    fi

    time_start="$(date +%s.%N)"

    _print_status_row $scname $STATUS_WAITING
    
    ( cd $scdir; "./$(basename $scname)" )
    scexit=$?

    duration=$(echo "scale=2; ($(date +%s.%N) - $time_start)/1" | bc -l)

    _print_status_row_overwrite
    # Check success
    if [[ 0 -eq $scexit ]]; then
        _print_status_row $scname $STATUS_SUCCESS
        _print_status_row_next
    else
        _print_status_row $scname $STATUS_ERROR
        _print_status_row_next
        _error "failed with code $scexit"
    fi

    # Produce string output
    if [[ $duration == "0" ]]; then
        _info "    quickly."
    else
        _info "    in ${duration}s."
    fi
done <<< "$(cd $DOTROOT; find . -type f | grep .*\.dotsh$;)"


exit_unlock 0
