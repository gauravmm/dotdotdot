#!/bin/bash
set -x
set -e

if ! which code; then
    echo "Visual Studio Code is not installed, or not yet configured!"
    exit 1
fi

CONFDIR=~/.config/Code/User

if [[ ! -d $CONFDIR ]]; then
    echo "Creating directory $CONFDIR"
    mkdir --parents $CONFDIR
fi

# Settings
rsync -rtuv settings.json $CONFDIR/settings.json
rsync -rtuv $CONFDIR/settings.json settings.json

# Keybindings
rsync -rtuv keybindings.json $CONFDIR/keybindings.json
rsync -rtuv $CONFDIR/keybindings.json keybindings.json

INSTALLED_HIST=$CONFDIR/installed.extensions

# If vscode is installed
tmpfn=$(mktemp)
code --list-extensions | sort > $tmpfn

# If the old list is available, then we see if we can update it
if [[ -f $INSTALLED_HIST ]]; then
    # We now find all extensions that are present in the new list, but not the old. Assume those are added
    # The corresponding case for removed extensions
    ext_added=$(mktemp)
    ext_removed=$(mktemp)
    comm --output-delimiter "" -13 <(cat $INSTALLED_HIST) <(cat $tmpfn) | tr -d '\0' > $ext_added
    comm --output-delimiter "" -23 <(cat $INSTALLED_HIST) <(cat $tmpfn) | tr -d '\0' > $ext_removed
    echo "ADDED:" $( cat $ext_added )
    echo "REMOVED:" $( cat $ext_removed )
    # Before we change anything
    tmp_inst=$(mktemp)
    tmp_remo=$(mktemp)
    cat install.extensions | sort > $tmp_inst
    cat remove.extensions | sort > $tmp_remo
    echo "INSTALL_0" $( cat $tmp_inst )
    echo "REMOVE_0" $( cat $tmp_remo )
    # We remove all the removed extensions from the install list,
    # and remove all the added extensions from the removed list
    comm --output-delimiter "" -13 <(cat $ext_removed) <(cat $tmp_inst) | tr -d '\0' > install.extensions
    comm --output-delimiter "" -13 <(cat $ext_added)   <(cat $tmp_remo) | tr -d '\0' > remove.extensions

    echo "INSTALL_1" $( cat install.extensions )
    echo "REMOVE_1" $( cat remove.extensions )
    # Finally, we add all the removed extensions to the removed list,
    # and add all the added extensions to the added list
    comm --output-delimiter "" <(cat $ext_added)  <(cat install.extensions) | tr -d '\0' > $tmp_inst
    comm --output-delimiter "" <(cat $ext_removed) <(cat remove.extensions) | tr -d '\0' > $tmp_remo
    cat $tmp_inst | sed "/^$/d" > install.extensions
    cat $tmp_remo | sed "/^$/d" > remove.extensions
    echo "INSTALL_2" $( cat install.extensions )
    echo "REMOVE_2" $( cat remove.extensions )

    rm $tmp_inst $tmp_remo $ext_added $ext_removed
fi

tmp_cmd=$(mktemp)
# Get all extensions that appear in the to-install list, but not in the already installed list.
comm --output-delimiter "" -13 <(cat $tmpfn)  <(cat install.extensions) | tr -d '\0' | sed 's/^/--install-extension /' > $tmp_cmd
# Remove all extensions in remove.extensions that appear in the already installed list
comm --output-delimiter "" -12 <(cat $tmpfn)  <(cat remove.extensions) | tr -d '\0' | sed 's/^/--uninstall-extension /' >> $tmp_cmd
# Command
echo "COMMAND: code $( cat $tmp_cmd )"

if [[ -s $tmp_cmd ]]; then
    echo "Running command..."
    code $(cat $tmp_cmd)
fi

code --list-extensions | sort > $INSTALLED_HIST

rm $tmpfn $tmp_cmd
